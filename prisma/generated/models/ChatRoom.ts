
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `ChatRoom` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ChatRoom
 * 
 */
export type ChatRoomModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatRoomPayload>

export type AggregateChatRoom = {
  _count: ChatRoomCountAggregateOutputType | null
  _min: ChatRoomMinAggregateOutputType | null
  _max: ChatRoomMaxAggregateOutputType | null
}

export type ChatRoomMinAggregateOutputType = {
  id: string | null
  senderId: string | null
  receiverId: string | null
  createAt: Date | null
  updatedAt: Date | null
  read: boolean | null
  content: string | null
}

export type ChatRoomMaxAggregateOutputType = {
  id: string | null
  senderId: string | null
  receiverId: string | null
  createAt: Date | null
  updatedAt: Date | null
  read: boolean | null
  content: string | null
}

export type ChatRoomCountAggregateOutputType = {
  id: number
  senderId: number
  receiverId: number
  createAt: number
  updatedAt: number
  read: number
  content: number
  _all: number
}


export type ChatRoomMinAggregateInputType = {
  id?: true
  senderId?: true
  receiverId?: true
  createAt?: true
  updatedAt?: true
  read?: true
  content?: true
}

export type ChatRoomMaxAggregateInputType = {
  id?: true
  senderId?: true
  receiverId?: true
  createAt?: true
  updatedAt?: true
  read?: true
  content?: true
}

export type ChatRoomCountAggregateInputType = {
  id?: true
  senderId?: true
  receiverId?: true
  createAt?: true
  updatedAt?: true
  read?: true
  content?: true
  _all?: true
}

export type ChatRoomAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatRoom to aggregate.
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatRooms to fetch.
   */
  orderBy?: Prisma.ChatRoomOrderByWithRelationInput | Prisma.ChatRoomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatRoomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatRooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatRooms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatRooms
  **/
  _count?: true | ChatRoomCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatRoomMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatRoomMaxAggregateInputType
}

export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
      [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatRoom[P]>
    : Prisma.GetScalarType<T[P], AggregateChatRoom[P]>
}




export type ChatRoomGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatRoomWhereInput
  orderBy?: Prisma.ChatRoomOrderByWithAggregationInput | Prisma.ChatRoomOrderByWithAggregationInput[]
  by: Prisma.ChatRoomScalarFieldEnum[] | Prisma.ChatRoomScalarFieldEnum
  having?: Prisma.ChatRoomScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatRoomCountAggregateInputType | true
  _min?: ChatRoomMinAggregateInputType
  _max?: ChatRoomMaxAggregateInputType
}

export type ChatRoomGroupByOutputType = {
  id: string
  senderId: string
  receiverId: string
  createAt: Date
  updatedAt: Date
  read: boolean
  content: string
  _count: ChatRoomCountAggregateOutputType | null
  _min: ChatRoomMinAggregateOutputType | null
  _max: ChatRoomMaxAggregateOutputType | null
}

type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
      }
    >
  > 



export type ChatRoomWhereInput = {
  AND?: Prisma.ChatRoomWhereInput | Prisma.ChatRoomWhereInput[]
  OR?: Prisma.ChatRoomWhereInput[]
  NOT?: Prisma.ChatRoomWhereInput | Prisma.ChatRoomWhereInput[]
  id?: Prisma.StringFilter<"ChatRoom"> | string
  senderId?: Prisma.StringFilter<"ChatRoom"> | string
  receiverId?: Prisma.StringFilter<"ChatRoom"> | string
  createAt?: Prisma.DateTimeFilter<"ChatRoom"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatRoom"> | Date | string
  read?: Prisma.BoolFilter<"ChatRoom"> | boolean
  content?: Prisma.StringFilter<"ChatRoom"> | string
  sender?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  reciver?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ChatRoomOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  receiverId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  read?: Prisma.SortOrder
  content?: Prisma.SortOrder
  sender?: Prisma.UserOrderByWithRelationInput
  reciver?: Prisma.UserOrderByWithRelationInput
}

export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatRoomWhereInput | Prisma.ChatRoomWhereInput[]
  OR?: Prisma.ChatRoomWhereInput[]
  NOT?: Prisma.ChatRoomWhereInput | Prisma.ChatRoomWhereInput[]
  senderId?: Prisma.StringFilter<"ChatRoom"> | string
  receiverId?: Prisma.StringFilter<"ChatRoom"> | string
  createAt?: Prisma.DateTimeFilter<"ChatRoom"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatRoom"> | Date | string
  read?: Prisma.BoolFilter<"ChatRoom"> | boolean
  content?: Prisma.StringFilter<"ChatRoom"> | string
  sender?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  reciver?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ChatRoomOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  receiverId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  read?: Prisma.SortOrder
  content?: Prisma.SortOrder
  _count?: Prisma.ChatRoomCountOrderByAggregateInput
  _max?: Prisma.ChatRoomMaxOrderByAggregateInput
  _min?: Prisma.ChatRoomMinOrderByAggregateInput
}

export type ChatRoomScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatRoomScalarWhereWithAggregatesInput | Prisma.ChatRoomScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatRoomScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatRoomScalarWhereWithAggregatesInput | Prisma.ChatRoomScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChatRoom"> | string
  senderId?: Prisma.StringWithAggregatesFilter<"ChatRoom"> | string
  receiverId?: Prisma.StringWithAggregatesFilter<"ChatRoom"> | string
  createAt?: Prisma.DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
  read?: Prisma.BoolWithAggregatesFilter<"ChatRoom"> | boolean
  content?: Prisma.StringWithAggregatesFilter<"ChatRoom"> | string
}

export type ChatRoomCreateInput = {
  id?: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
  sender: Prisma.UserCreateNestedOneWithoutSentMessageInput
  reciver: Prisma.UserCreateNestedOneWithoutReceivedMessagesInput
}

export type ChatRoomUncheckedCreateInput = {
  id?: string
  senderId: string
  receiverId: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
}

export type ChatRoomUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sender?: Prisma.UserUpdateOneRequiredWithoutSentMessageNestedInput
  reciver?: Prisma.UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
}

export type ChatRoomUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  receiverId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatRoomCreateManyInput = {
  id?: string
  senderId: string
  receiverId: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
}

export type ChatRoomUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatRoomUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  receiverId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatRoomCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  receiverId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  read?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type ChatRoomMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  receiverId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  read?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type ChatRoomMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  receiverId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  read?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type ChatRoomListRelationFilter = {
  every?: Prisma.ChatRoomWhereInput
  some?: Prisma.ChatRoomWhereInput
  none?: Prisma.ChatRoomWhereInput
}

export type ChatRoomOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type ChatRoomCreateNestedManyWithoutSenderInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutSenderInput, Prisma.ChatRoomUncheckedCreateWithoutSenderInput> | Prisma.ChatRoomCreateWithoutSenderInput[] | Prisma.ChatRoomUncheckedCreateWithoutSenderInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutSenderInput | Prisma.ChatRoomCreateOrConnectWithoutSenderInput[]
  createMany?: Prisma.ChatRoomCreateManySenderInputEnvelope
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
}

export type ChatRoomCreateNestedManyWithoutReciverInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutReciverInput, Prisma.ChatRoomUncheckedCreateWithoutReciverInput> | Prisma.ChatRoomCreateWithoutReciverInput[] | Prisma.ChatRoomUncheckedCreateWithoutReciverInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutReciverInput | Prisma.ChatRoomCreateOrConnectWithoutReciverInput[]
  createMany?: Prisma.ChatRoomCreateManyReciverInputEnvelope
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
}

export type ChatRoomUncheckedCreateNestedManyWithoutSenderInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutSenderInput, Prisma.ChatRoomUncheckedCreateWithoutSenderInput> | Prisma.ChatRoomCreateWithoutSenderInput[] | Prisma.ChatRoomUncheckedCreateWithoutSenderInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutSenderInput | Prisma.ChatRoomCreateOrConnectWithoutSenderInput[]
  createMany?: Prisma.ChatRoomCreateManySenderInputEnvelope
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
}

export type ChatRoomUncheckedCreateNestedManyWithoutReciverInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutReciverInput, Prisma.ChatRoomUncheckedCreateWithoutReciverInput> | Prisma.ChatRoomCreateWithoutReciverInput[] | Prisma.ChatRoomUncheckedCreateWithoutReciverInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutReciverInput | Prisma.ChatRoomCreateOrConnectWithoutReciverInput[]
  createMany?: Prisma.ChatRoomCreateManyReciverInputEnvelope
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
}

export type ChatRoomUpdateManyWithoutSenderNestedInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutSenderInput, Prisma.ChatRoomUncheckedCreateWithoutSenderInput> | Prisma.ChatRoomCreateWithoutSenderInput[] | Prisma.ChatRoomUncheckedCreateWithoutSenderInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutSenderInput | Prisma.ChatRoomCreateOrConnectWithoutSenderInput[]
  upsert?: Prisma.ChatRoomUpsertWithWhereUniqueWithoutSenderInput | Prisma.ChatRoomUpsertWithWhereUniqueWithoutSenderInput[]
  createMany?: Prisma.ChatRoomCreateManySenderInputEnvelope
  set?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  disconnect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  delete?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  update?: Prisma.ChatRoomUpdateWithWhereUniqueWithoutSenderInput | Prisma.ChatRoomUpdateWithWhereUniqueWithoutSenderInput[]
  updateMany?: Prisma.ChatRoomUpdateManyWithWhereWithoutSenderInput | Prisma.ChatRoomUpdateManyWithWhereWithoutSenderInput[]
  deleteMany?: Prisma.ChatRoomScalarWhereInput | Prisma.ChatRoomScalarWhereInput[]
}

export type ChatRoomUpdateManyWithoutReciverNestedInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutReciverInput, Prisma.ChatRoomUncheckedCreateWithoutReciverInput> | Prisma.ChatRoomCreateWithoutReciverInput[] | Prisma.ChatRoomUncheckedCreateWithoutReciverInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutReciverInput | Prisma.ChatRoomCreateOrConnectWithoutReciverInput[]
  upsert?: Prisma.ChatRoomUpsertWithWhereUniqueWithoutReciverInput | Prisma.ChatRoomUpsertWithWhereUniqueWithoutReciverInput[]
  createMany?: Prisma.ChatRoomCreateManyReciverInputEnvelope
  set?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  disconnect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  delete?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  update?: Prisma.ChatRoomUpdateWithWhereUniqueWithoutReciverInput | Prisma.ChatRoomUpdateWithWhereUniqueWithoutReciverInput[]
  updateMany?: Prisma.ChatRoomUpdateManyWithWhereWithoutReciverInput | Prisma.ChatRoomUpdateManyWithWhereWithoutReciverInput[]
  deleteMany?: Prisma.ChatRoomScalarWhereInput | Prisma.ChatRoomScalarWhereInput[]
}

export type ChatRoomUncheckedUpdateManyWithoutSenderNestedInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutSenderInput, Prisma.ChatRoomUncheckedCreateWithoutSenderInput> | Prisma.ChatRoomCreateWithoutSenderInput[] | Prisma.ChatRoomUncheckedCreateWithoutSenderInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutSenderInput | Prisma.ChatRoomCreateOrConnectWithoutSenderInput[]
  upsert?: Prisma.ChatRoomUpsertWithWhereUniqueWithoutSenderInput | Prisma.ChatRoomUpsertWithWhereUniqueWithoutSenderInput[]
  createMany?: Prisma.ChatRoomCreateManySenderInputEnvelope
  set?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  disconnect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  delete?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  update?: Prisma.ChatRoomUpdateWithWhereUniqueWithoutSenderInput | Prisma.ChatRoomUpdateWithWhereUniqueWithoutSenderInput[]
  updateMany?: Prisma.ChatRoomUpdateManyWithWhereWithoutSenderInput | Prisma.ChatRoomUpdateManyWithWhereWithoutSenderInput[]
  deleteMany?: Prisma.ChatRoomScalarWhereInput | Prisma.ChatRoomScalarWhereInput[]
}

export type ChatRoomUncheckedUpdateManyWithoutReciverNestedInput = {
  create?: Prisma.XOR<Prisma.ChatRoomCreateWithoutReciverInput, Prisma.ChatRoomUncheckedCreateWithoutReciverInput> | Prisma.ChatRoomCreateWithoutReciverInput[] | Prisma.ChatRoomUncheckedCreateWithoutReciverInput[]
  connectOrCreate?: Prisma.ChatRoomCreateOrConnectWithoutReciverInput | Prisma.ChatRoomCreateOrConnectWithoutReciverInput[]
  upsert?: Prisma.ChatRoomUpsertWithWhereUniqueWithoutReciverInput | Prisma.ChatRoomUpsertWithWhereUniqueWithoutReciverInput[]
  createMany?: Prisma.ChatRoomCreateManyReciverInputEnvelope
  set?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  disconnect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  delete?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  connect?: Prisma.ChatRoomWhereUniqueInput | Prisma.ChatRoomWhereUniqueInput[]
  update?: Prisma.ChatRoomUpdateWithWhereUniqueWithoutReciverInput | Prisma.ChatRoomUpdateWithWhereUniqueWithoutReciverInput[]
  updateMany?: Prisma.ChatRoomUpdateManyWithWhereWithoutReciverInput | Prisma.ChatRoomUpdateManyWithWhereWithoutReciverInput[]
  deleteMany?: Prisma.ChatRoomScalarWhereInput | Prisma.ChatRoomScalarWhereInput[]
}

export type ChatRoomCreateWithoutSenderInput = {
  id?: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
  reciver: Prisma.UserCreateNestedOneWithoutReceivedMessagesInput
}

export type ChatRoomUncheckedCreateWithoutSenderInput = {
  id?: string
  receiverId: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
}

export type ChatRoomCreateOrConnectWithoutSenderInput = {
  where: Prisma.ChatRoomWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatRoomCreateWithoutSenderInput, Prisma.ChatRoomUncheckedCreateWithoutSenderInput>
}

export type ChatRoomCreateManySenderInputEnvelope = {
  data: Prisma.ChatRoomCreateManySenderInput | Prisma.ChatRoomCreateManySenderInput[]
  skipDuplicates?: boolean
}

export type ChatRoomCreateWithoutReciverInput = {
  id?: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
  sender: Prisma.UserCreateNestedOneWithoutSentMessageInput
}

export type ChatRoomUncheckedCreateWithoutReciverInput = {
  id?: string
  senderId: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
}

export type ChatRoomCreateOrConnectWithoutReciverInput = {
  where: Prisma.ChatRoomWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatRoomCreateWithoutReciverInput, Prisma.ChatRoomUncheckedCreateWithoutReciverInput>
}

export type ChatRoomCreateManyReciverInputEnvelope = {
  data: Prisma.ChatRoomCreateManyReciverInput | Prisma.ChatRoomCreateManyReciverInput[]
  skipDuplicates?: boolean
}

export type ChatRoomUpsertWithWhereUniqueWithoutSenderInput = {
  where: Prisma.ChatRoomWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatRoomUpdateWithoutSenderInput, Prisma.ChatRoomUncheckedUpdateWithoutSenderInput>
  create: Prisma.XOR<Prisma.ChatRoomCreateWithoutSenderInput, Prisma.ChatRoomUncheckedCreateWithoutSenderInput>
}

export type ChatRoomUpdateWithWhereUniqueWithoutSenderInput = {
  where: Prisma.ChatRoomWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatRoomUpdateWithoutSenderInput, Prisma.ChatRoomUncheckedUpdateWithoutSenderInput>
}

export type ChatRoomUpdateManyWithWhereWithoutSenderInput = {
  where: Prisma.ChatRoomScalarWhereInput
  data: Prisma.XOR<Prisma.ChatRoomUpdateManyMutationInput, Prisma.ChatRoomUncheckedUpdateManyWithoutSenderInput>
}

export type ChatRoomScalarWhereInput = {
  AND?: Prisma.ChatRoomScalarWhereInput | Prisma.ChatRoomScalarWhereInput[]
  OR?: Prisma.ChatRoomScalarWhereInput[]
  NOT?: Prisma.ChatRoomScalarWhereInput | Prisma.ChatRoomScalarWhereInput[]
  id?: Prisma.StringFilter<"ChatRoom"> | string
  senderId?: Prisma.StringFilter<"ChatRoom"> | string
  receiverId?: Prisma.StringFilter<"ChatRoom"> | string
  createAt?: Prisma.DateTimeFilter<"ChatRoom"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatRoom"> | Date | string
  read?: Prisma.BoolFilter<"ChatRoom"> | boolean
  content?: Prisma.StringFilter<"ChatRoom"> | string
}

export type ChatRoomUpsertWithWhereUniqueWithoutReciverInput = {
  where: Prisma.ChatRoomWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatRoomUpdateWithoutReciverInput, Prisma.ChatRoomUncheckedUpdateWithoutReciverInput>
  create: Prisma.XOR<Prisma.ChatRoomCreateWithoutReciverInput, Prisma.ChatRoomUncheckedCreateWithoutReciverInput>
}

export type ChatRoomUpdateWithWhereUniqueWithoutReciverInput = {
  where: Prisma.ChatRoomWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatRoomUpdateWithoutReciverInput, Prisma.ChatRoomUncheckedUpdateWithoutReciverInput>
}

export type ChatRoomUpdateManyWithWhereWithoutReciverInput = {
  where: Prisma.ChatRoomScalarWhereInput
  data: Prisma.XOR<Prisma.ChatRoomUpdateManyMutationInput, Prisma.ChatRoomUncheckedUpdateManyWithoutReciverInput>
}

export type ChatRoomCreateManySenderInput = {
  id?: string
  receiverId: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
}

export type ChatRoomCreateManyReciverInput = {
  id?: string
  senderId: string
  createAt?: Date | string
  updatedAt?: Date | string
  read?: boolean
  content: string
}

export type ChatRoomUpdateWithoutSenderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  reciver?: Prisma.UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
}

export type ChatRoomUncheckedUpdateWithoutSenderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiverId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatRoomUncheckedUpdateManyWithoutSenderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiverId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatRoomUpdateWithoutReciverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sender?: Prisma.UserUpdateOneRequiredWithoutSentMessageNestedInput
}

export type ChatRoomUncheckedUpdateWithoutReciverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatRoomUncheckedUpdateManyWithoutReciverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  read?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ChatRoomSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  senderId?: boolean
  receiverId?: boolean
  createAt?: boolean
  updatedAt?: boolean
  read?: boolean
  content?: boolean
  sender?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  reciver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatRoom"]>

export type ChatRoomSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  senderId?: boolean
  receiverId?: boolean
  createAt?: boolean
  updatedAt?: boolean
  read?: boolean
  content?: boolean
  sender?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  reciver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatRoom"]>

export type ChatRoomSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  senderId?: boolean
  receiverId?: boolean
  createAt?: boolean
  updatedAt?: boolean
  read?: boolean
  content?: boolean
  sender?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  reciver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatRoom"]>

export type ChatRoomSelectScalar = {
  id?: boolean
  senderId?: boolean
  receiverId?: boolean
  createAt?: boolean
  updatedAt?: boolean
  read?: boolean
  content?: boolean
}

export type ChatRoomOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "senderId" | "receiverId" | "createAt" | "updatedAt" | "read" | "content", ExtArgs["result"]["chatRoom"]>
export type ChatRoomInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sender?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  reciver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ChatRoomIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sender?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  reciver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ChatRoomIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sender?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  reciver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ChatRoomPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatRoom"
  objects: {
    sender: Prisma.$UserPayload<ExtArgs>
    reciver: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    senderId: string
    receiverId: string
    createAt: Date
    updatedAt: Date
    read: boolean
    content: string
  }, ExtArgs["result"]["chatRoom"]>
  composites: {}
}

export type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload, S>

export type ChatRoomCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatRoomCountAggregateInputType | true
  }

export interface ChatRoomDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
  /**
   * Find zero or one ChatRoom that matches the filter.
   * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
   * @example
   * // Get one ChatRoom
   * const chatRoom = await prisma.chatRoom.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatRoomFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
   * @example
   * // Get one ChatRoom
   * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatRoom that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
   * @example
   * // Get one ChatRoom
   * const chatRoom = await prisma.chatRoom.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatRoomFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatRoom that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
   * @example
   * // Get one ChatRoom
   * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatRooms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatRooms
   * const chatRooms = await prisma.chatRoom.findMany()
   * 
   * // Get first 10 ChatRooms
   * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatRoomFindManyArgs>(args?: Prisma.SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatRoom.
   * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
   * @example
   * // Create one ChatRoom
   * const ChatRoom = await prisma.chatRoom.create({
   *   data: {
   *     // ... data to create a ChatRoom
   *   }
   * })
   * 
   */
  create<T extends ChatRoomCreateArgs>(args: Prisma.SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatRooms.
   * @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
   * @example
   * // Create many ChatRooms
   * const chatRoom = await prisma.chatRoom.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatRoomCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChatRooms and returns the data saved in the database.
   * @param {ChatRoomCreateManyAndReturnArgs} args - Arguments to create many ChatRooms.
   * @example
   * // Create many ChatRooms
   * const chatRoom = await prisma.chatRoom.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChatRooms and only return the `id`
   * const chatRoomWithIdOnly = await prisma.chatRoom.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatRoomCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChatRoom.
   * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
   * @example
   * // Delete one ChatRoom
   * const ChatRoom = await prisma.chatRoom.delete({
   *   where: {
   *     // ... filter to delete one ChatRoom
   *   }
   * })
   * 
   */
  delete<T extends ChatRoomDeleteArgs>(args: Prisma.SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatRoom.
   * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
   * @example
   * // Update one ChatRoom
   * const chatRoom = await prisma.chatRoom.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatRoomUpdateArgs>(args: Prisma.SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatRooms.
   * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
   * @example
   * // Delete a few ChatRooms
   * const { count } = await prisma.chatRoom.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatRoomDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatRooms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatRooms
   * const chatRoom = await prisma.chatRoom.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatRoomUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatRooms and returns the data updated in the database.
   * @param {ChatRoomUpdateManyAndReturnArgs} args - Arguments to update many ChatRooms.
   * @example
   * // Update many ChatRooms
   * const chatRoom = await prisma.chatRoom.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatRooms and only return the `id`
   * const chatRoomWithIdOnly = await prisma.chatRoom.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatRoomUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatRoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChatRoom.
   * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
   * @example
   * // Update or create a ChatRoom
   * const chatRoom = await prisma.chatRoom.upsert({
   *   create: {
   *     // ... data to create a ChatRoom
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatRoom we want to update
   *   }
   * })
   */
  upsert<T extends ChatRoomUpsertArgs>(args: Prisma.SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatRoomClient<runtime.Types.Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatRooms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
   * @example
   * // Count the number of ChatRooms
   * const count = await prisma.chatRoom.count({
   *   where: {
   *     // ... the filter for the ChatRooms we want to count
   *   }
   * })
  **/
  count<T extends ChatRoomCountArgs>(
    args?: Prisma.Subset<T, ChatRoomCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatRoom.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatRoomAggregateArgs>(args: Prisma.Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

  /**
   * Group by ChatRoom.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatRoomGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatRoomGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
      : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatRoom model
 */
readonly fields: ChatRoomFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatRoom.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sender<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  reciver<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatRoom model
 */
export interface ChatRoomFieldRefs {
  readonly id: Prisma.FieldRef<"ChatRoom", 'String'>
  readonly senderId: Prisma.FieldRef<"ChatRoom", 'String'>
  readonly receiverId: Prisma.FieldRef<"ChatRoom", 'String'>
  readonly createAt: Prisma.FieldRef<"ChatRoom", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChatRoom", 'DateTime'>
  readonly read: Prisma.FieldRef<"ChatRoom", 'Boolean'>
  readonly content: Prisma.FieldRef<"ChatRoom", 'String'>
}
    

// Custom InputTypes
/**
 * ChatRoom findUnique
 */
export type ChatRoomFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * Filter, which ChatRoom to fetch.
   */
  where: Prisma.ChatRoomWhereUniqueInput
}

/**
 * ChatRoom findUniqueOrThrow
 */
export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * Filter, which ChatRoom to fetch.
   */
  where: Prisma.ChatRoomWhereUniqueInput
}

/**
 * ChatRoom findFirst
 */
export type ChatRoomFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * Filter, which ChatRoom to fetch.
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatRooms to fetch.
   */
  orderBy?: Prisma.ChatRoomOrderByWithRelationInput | Prisma.ChatRoomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatRooms.
   */
  cursor?: Prisma.ChatRoomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatRooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatRooms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatRooms.
   */
  distinct?: Prisma.ChatRoomScalarFieldEnum | Prisma.ChatRoomScalarFieldEnum[]
}

/**
 * ChatRoom findFirstOrThrow
 */
export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * Filter, which ChatRoom to fetch.
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatRooms to fetch.
   */
  orderBy?: Prisma.ChatRoomOrderByWithRelationInput | Prisma.ChatRoomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatRooms.
   */
  cursor?: Prisma.ChatRoomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatRooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatRooms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatRooms.
   */
  distinct?: Prisma.ChatRoomScalarFieldEnum | Prisma.ChatRoomScalarFieldEnum[]
}

/**
 * ChatRoom findMany
 */
export type ChatRoomFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * Filter, which ChatRooms to fetch.
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatRooms to fetch.
   */
  orderBy?: Prisma.ChatRoomOrderByWithRelationInput | Prisma.ChatRoomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatRooms.
   */
  cursor?: Prisma.ChatRoomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatRooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatRooms.
   */
  skip?: number
  distinct?: Prisma.ChatRoomScalarFieldEnum | Prisma.ChatRoomScalarFieldEnum[]
}

/**
 * ChatRoom create
 */
export type ChatRoomCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatRoom.
   */
  data: Prisma.XOR<Prisma.ChatRoomCreateInput, Prisma.ChatRoomUncheckedCreateInput>
}

/**
 * ChatRoom createMany
 */
export type ChatRoomCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatRooms.
   */
  data: Prisma.ChatRoomCreateManyInput | Prisma.ChatRoomCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatRoom createManyAndReturn
 */
export type ChatRoomCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * The data used to create many ChatRooms.
   */
  data: Prisma.ChatRoomCreateManyInput | Prisma.ChatRoomCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChatRoom update
 */
export type ChatRoomUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatRoom.
   */
  data: Prisma.XOR<Prisma.ChatRoomUpdateInput, Prisma.ChatRoomUncheckedUpdateInput>
  /**
   * Choose, which ChatRoom to update.
   */
  where: Prisma.ChatRoomWhereUniqueInput
}

/**
 * ChatRoom updateMany
 */
export type ChatRoomUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatRooms.
   */
  data: Prisma.XOR<Prisma.ChatRoomUpdateManyMutationInput, Prisma.ChatRoomUncheckedUpdateManyInput>
  /**
   * Filter which ChatRooms to update
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * Limit how many ChatRooms to update.
   */
  limit?: number
}

/**
 * ChatRoom updateManyAndReturn
 */
export type ChatRoomUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * The data used to update ChatRooms.
   */
  data: Prisma.XOR<Prisma.ChatRoomUpdateManyMutationInput, Prisma.ChatRoomUncheckedUpdateManyInput>
  /**
   * Filter which ChatRooms to update
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * Limit how many ChatRooms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChatRoom upsert
 */
export type ChatRoomUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatRoom to update in case it exists.
   */
  where: Prisma.ChatRoomWhereUniqueInput
  /**
   * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
   */
  create: Prisma.XOR<Prisma.ChatRoomCreateInput, Prisma.ChatRoomUncheckedCreateInput>
  /**
   * In case the ChatRoom was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatRoomUpdateInput, Prisma.ChatRoomUncheckedUpdateInput>
}

/**
 * ChatRoom delete
 */
export type ChatRoomDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
  /**
   * Filter which ChatRoom to delete.
   */
  where: Prisma.ChatRoomWhereUniqueInput
}

/**
 * ChatRoom deleteMany
 */
export type ChatRoomDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatRooms to delete
   */
  where?: Prisma.ChatRoomWhereInput
  /**
   * Limit how many ChatRooms to delete.
   */
  limit?: number
}

/**
 * ChatRoom without action
 */
export type ChatRoomDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatRoom
   */
  select?: Prisma.ChatRoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatRoom
   */
  omit?: Prisma.ChatRoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatRoomInclude<ExtArgs> | null
}
