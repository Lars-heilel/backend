
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Friendship` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Friendship
 * 
 */
export type FriendshipModel = runtime.Types.Result.DefaultSelection<Prisma.$FriendshipPayload>

export type AggregateFriendship = {
  _count: FriendshipCountAggregateOutputType | null
  _min: FriendshipMinAggregateOutputType | null
  _max: FriendshipMaxAggregateOutputType | null
}

export type FriendshipMinAggregateOutputType = {
  id: string | null
  requesterId: string | null
  addresseeId: string | null
  status: $Enums.FriendshipStatus | null
  createAt: Date | null
  updatedAt: Date | null
}

export type FriendshipMaxAggregateOutputType = {
  id: string | null
  requesterId: string | null
  addresseeId: string | null
  status: $Enums.FriendshipStatus | null
  createAt: Date | null
  updatedAt: Date | null
}

export type FriendshipCountAggregateOutputType = {
  id: number
  requesterId: number
  addresseeId: number
  status: number
  createAt: number
  updatedAt: number
  _all: number
}


export type FriendshipMinAggregateInputType = {
  id?: true
  requesterId?: true
  addresseeId?: true
  status?: true
  createAt?: true
  updatedAt?: true
}

export type FriendshipMaxAggregateInputType = {
  id?: true
  requesterId?: true
  addresseeId?: true
  status?: true
  createAt?: true
  updatedAt?: true
}

export type FriendshipCountAggregateInputType = {
  id?: true
  requesterId?: true
  addresseeId?: true
  status?: true
  createAt?: true
  updatedAt?: true
  _all?: true
}

export type FriendshipAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Friendship to aggregate.
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Friendships to fetch.
   */
  orderBy?: Prisma.FriendshipOrderByWithRelationInput | Prisma.FriendshipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FriendshipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Friendships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Friendships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Friendships
  **/
  _count?: true | FriendshipCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FriendshipMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FriendshipMaxAggregateInputType
}

export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
      [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFriendship[P]>
    : Prisma.GetScalarType<T[P], AggregateFriendship[P]>
}




export type FriendshipGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FriendshipWhereInput
  orderBy?: Prisma.FriendshipOrderByWithAggregationInput | Prisma.FriendshipOrderByWithAggregationInput[]
  by: Prisma.FriendshipScalarFieldEnum[] | Prisma.FriendshipScalarFieldEnum
  having?: Prisma.FriendshipScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FriendshipCountAggregateInputType | true
  _min?: FriendshipMinAggregateInputType
  _max?: FriendshipMaxAggregateInputType
}

export type FriendshipGroupByOutputType = {
  id: string
  requesterId: string
  addresseeId: string
  status: $Enums.FriendshipStatus
  createAt: Date
  updatedAt: Date
  _count: FriendshipCountAggregateOutputType | null
  _min: FriendshipMinAggregateOutputType | null
  _max: FriendshipMaxAggregateOutputType | null
}

type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FriendshipGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FriendshipGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FriendshipGroupByOutputType[P]>
      }
    >
  > 



export type FriendshipWhereInput = {
  AND?: Prisma.FriendshipWhereInput | Prisma.FriendshipWhereInput[]
  OR?: Prisma.FriendshipWhereInput[]
  NOT?: Prisma.FriendshipWhereInput | Prisma.FriendshipWhereInput[]
  id?: Prisma.StringFilter<"Friendship"> | string
  requesterId?: Prisma.StringFilter<"Friendship"> | string
  addresseeId?: Prisma.StringFilter<"Friendship"> | string
  status?: Prisma.EnumFriendshipStatusFilter<"Friendship"> | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFilter<"Friendship"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Friendship"> | Date | string
  requester?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  addressee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type FriendshipOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  requesterId?: Prisma.SortOrder
  addresseeId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  requester?: Prisma.UserOrderByWithRelationInput
  addressee?: Prisma.UserOrderByWithRelationInput
}

export type FriendshipWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  requesterId_addresseeId?: Prisma.FriendshipRequesterIdAddresseeIdCompoundUniqueInput
  AND?: Prisma.FriendshipWhereInput | Prisma.FriendshipWhereInput[]
  OR?: Prisma.FriendshipWhereInput[]
  NOT?: Prisma.FriendshipWhereInput | Prisma.FriendshipWhereInput[]
  requesterId?: Prisma.StringFilter<"Friendship"> | string
  addresseeId?: Prisma.StringFilter<"Friendship"> | string
  status?: Prisma.EnumFriendshipStatusFilter<"Friendship"> | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFilter<"Friendship"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Friendship"> | Date | string
  requester?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  addressee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "requesterId_addresseeId">

export type FriendshipOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  requesterId?: Prisma.SortOrder
  addresseeId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FriendshipCountOrderByAggregateInput
  _max?: Prisma.FriendshipMaxOrderByAggregateInput
  _min?: Prisma.FriendshipMinOrderByAggregateInput
}

export type FriendshipScalarWhereWithAggregatesInput = {
  AND?: Prisma.FriendshipScalarWhereWithAggregatesInput | Prisma.FriendshipScalarWhereWithAggregatesInput[]
  OR?: Prisma.FriendshipScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FriendshipScalarWhereWithAggregatesInput | Prisma.FriendshipScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Friendship"> | string
  requesterId?: Prisma.StringWithAggregatesFilter<"Friendship"> | string
  addresseeId?: Prisma.StringWithAggregatesFilter<"Friendship"> | string
  status?: Prisma.EnumFriendshipStatusWithAggregatesFilter<"Friendship"> | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeWithAggregatesFilter<"Friendship"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Friendship"> | Date | string
}

export type FriendshipCreateInput = {
  id?: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
  requester: Prisma.UserCreateNestedOneWithoutSendRequestInput
  addressee: Prisma.UserCreateNestedOneWithoutReceivedRequestsInput
}

export type FriendshipUncheckedCreateInput = {
  id?: string
  requesterId: string
  addresseeId: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
}

export type FriendshipUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  requester?: Prisma.UserUpdateOneRequiredWithoutSendRequestNestedInput
  addressee?: Prisma.UserUpdateOneRequiredWithoutReceivedRequestsNestedInput
}

export type FriendshipUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterId?: Prisma.StringFieldUpdateOperationsInput | string
  addresseeId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FriendshipCreateManyInput = {
  id?: string
  requesterId: string
  addresseeId: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
}

export type FriendshipUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FriendshipUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterId?: Prisma.StringFieldUpdateOperationsInput | string
  addresseeId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FriendshipRequesterIdAddresseeIdCompoundUniqueInput = {
  requesterId: string
  addresseeId: string
}

export type FriendshipCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  requesterId?: Prisma.SortOrder
  addresseeId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FriendshipMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  requesterId?: Prisma.SortOrder
  addresseeId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FriendshipMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  requesterId?: Prisma.SortOrder
  addresseeId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FriendshipListRelationFilter = {
  every?: Prisma.FriendshipWhereInput
  some?: Prisma.FriendshipWhereInput
  none?: Prisma.FriendshipWhereInput
}

export type FriendshipOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type EnumFriendshipStatusFieldUpdateOperationsInput = {
  set?: $Enums.FriendshipStatus
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type FriendshipCreateNestedManyWithoutRequesterInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutRequesterInput, Prisma.FriendshipUncheckedCreateWithoutRequesterInput> | Prisma.FriendshipCreateWithoutRequesterInput[] | Prisma.FriendshipUncheckedCreateWithoutRequesterInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutRequesterInput | Prisma.FriendshipCreateOrConnectWithoutRequesterInput[]
  createMany?: Prisma.FriendshipCreateManyRequesterInputEnvelope
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
}

export type FriendshipCreateNestedManyWithoutAddresseeInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutAddresseeInput, Prisma.FriendshipUncheckedCreateWithoutAddresseeInput> | Prisma.FriendshipCreateWithoutAddresseeInput[] | Prisma.FriendshipUncheckedCreateWithoutAddresseeInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutAddresseeInput | Prisma.FriendshipCreateOrConnectWithoutAddresseeInput[]
  createMany?: Prisma.FriendshipCreateManyAddresseeInputEnvelope
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
}

export type FriendshipUncheckedCreateNestedManyWithoutRequesterInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutRequesterInput, Prisma.FriendshipUncheckedCreateWithoutRequesterInput> | Prisma.FriendshipCreateWithoutRequesterInput[] | Prisma.FriendshipUncheckedCreateWithoutRequesterInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutRequesterInput | Prisma.FriendshipCreateOrConnectWithoutRequesterInput[]
  createMany?: Prisma.FriendshipCreateManyRequesterInputEnvelope
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
}

export type FriendshipUncheckedCreateNestedManyWithoutAddresseeInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutAddresseeInput, Prisma.FriendshipUncheckedCreateWithoutAddresseeInput> | Prisma.FriendshipCreateWithoutAddresseeInput[] | Prisma.FriendshipUncheckedCreateWithoutAddresseeInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutAddresseeInput | Prisma.FriendshipCreateOrConnectWithoutAddresseeInput[]
  createMany?: Prisma.FriendshipCreateManyAddresseeInputEnvelope
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
}

export type FriendshipUpdateManyWithoutRequesterNestedInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutRequesterInput, Prisma.FriendshipUncheckedCreateWithoutRequesterInput> | Prisma.FriendshipCreateWithoutRequesterInput[] | Prisma.FriendshipUncheckedCreateWithoutRequesterInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutRequesterInput | Prisma.FriendshipCreateOrConnectWithoutRequesterInput[]
  upsert?: Prisma.FriendshipUpsertWithWhereUniqueWithoutRequesterInput | Prisma.FriendshipUpsertWithWhereUniqueWithoutRequesterInput[]
  createMany?: Prisma.FriendshipCreateManyRequesterInputEnvelope
  set?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  disconnect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  delete?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  update?: Prisma.FriendshipUpdateWithWhereUniqueWithoutRequesterInput | Prisma.FriendshipUpdateWithWhereUniqueWithoutRequesterInput[]
  updateMany?: Prisma.FriendshipUpdateManyWithWhereWithoutRequesterInput | Prisma.FriendshipUpdateManyWithWhereWithoutRequesterInput[]
  deleteMany?: Prisma.FriendshipScalarWhereInput | Prisma.FriendshipScalarWhereInput[]
}

export type FriendshipUpdateManyWithoutAddresseeNestedInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutAddresseeInput, Prisma.FriendshipUncheckedCreateWithoutAddresseeInput> | Prisma.FriendshipCreateWithoutAddresseeInput[] | Prisma.FriendshipUncheckedCreateWithoutAddresseeInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutAddresseeInput | Prisma.FriendshipCreateOrConnectWithoutAddresseeInput[]
  upsert?: Prisma.FriendshipUpsertWithWhereUniqueWithoutAddresseeInput | Prisma.FriendshipUpsertWithWhereUniqueWithoutAddresseeInput[]
  createMany?: Prisma.FriendshipCreateManyAddresseeInputEnvelope
  set?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  disconnect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  delete?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  update?: Prisma.FriendshipUpdateWithWhereUniqueWithoutAddresseeInput | Prisma.FriendshipUpdateWithWhereUniqueWithoutAddresseeInput[]
  updateMany?: Prisma.FriendshipUpdateManyWithWhereWithoutAddresseeInput | Prisma.FriendshipUpdateManyWithWhereWithoutAddresseeInput[]
  deleteMany?: Prisma.FriendshipScalarWhereInput | Prisma.FriendshipScalarWhereInput[]
}

export type FriendshipUncheckedUpdateManyWithoutRequesterNestedInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutRequesterInput, Prisma.FriendshipUncheckedCreateWithoutRequesterInput> | Prisma.FriendshipCreateWithoutRequesterInput[] | Prisma.FriendshipUncheckedCreateWithoutRequesterInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutRequesterInput | Prisma.FriendshipCreateOrConnectWithoutRequesterInput[]
  upsert?: Prisma.FriendshipUpsertWithWhereUniqueWithoutRequesterInput | Prisma.FriendshipUpsertWithWhereUniqueWithoutRequesterInput[]
  createMany?: Prisma.FriendshipCreateManyRequesterInputEnvelope
  set?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  disconnect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  delete?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  update?: Prisma.FriendshipUpdateWithWhereUniqueWithoutRequesterInput | Prisma.FriendshipUpdateWithWhereUniqueWithoutRequesterInput[]
  updateMany?: Prisma.FriendshipUpdateManyWithWhereWithoutRequesterInput | Prisma.FriendshipUpdateManyWithWhereWithoutRequesterInput[]
  deleteMany?: Prisma.FriendshipScalarWhereInput | Prisma.FriendshipScalarWhereInput[]
}

export type FriendshipUncheckedUpdateManyWithoutAddresseeNestedInput = {
  create?: Prisma.XOR<Prisma.FriendshipCreateWithoutAddresseeInput, Prisma.FriendshipUncheckedCreateWithoutAddresseeInput> | Prisma.FriendshipCreateWithoutAddresseeInput[] | Prisma.FriendshipUncheckedCreateWithoutAddresseeInput[]
  connectOrCreate?: Prisma.FriendshipCreateOrConnectWithoutAddresseeInput | Prisma.FriendshipCreateOrConnectWithoutAddresseeInput[]
  upsert?: Prisma.FriendshipUpsertWithWhereUniqueWithoutAddresseeInput | Prisma.FriendshipUpsertWithWhereUniqueWithoutAddresseeInput[]
  createMany?: Prisma.FriendshipCreateManyAddresseeInputEnvelope
  set?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  disconnect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  delete?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  connect?: Prisma.FriendshipWhereUniqueInput | Prisma.FriendshipWhereUniqueInput[]
  update?: Prisma.FriendshipUpdateWithWhereUniqueWithoutAddresseeInput | Prisma.FriendshipUpdateWithWhereUniqueWithoutAddresseeInput[]
  updateMany?: Prisma.FriendshipUpdateManyWithWhereWithoutAddresseeInput | Prisma.FriendshipUpdateManyWithWhereWithoutAddresseeInput[]
  deleteMany?: Prisma.FriendshipScalarWhereInput | Prisma.FriendshipScalarWhereInput[]
}

export type FriendshipCreateWithoutRequesterInput = {
  id?: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
  addressee: Prisma.UserCreateNestedOneWithoutReceivedRequestsInput
}

export type FriendshipUncheckedCreateWithoutRequesterInput = {
  id?: string
  addresseeId: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
}

export type FriendshipCreateOrConnectWithoutRequesterInput = {
  where: Prisma.FriendshipWhereUniqueInput
  create: Prisma.XOR<Prisma.FriendshipCreateWithoutRequesterInput, Prisma.FriendshipUncheckedCreateWithoutRequesterInput>
}

export type FriendshipCreateManyRequesterInputEnvelope = {
  data: Prisma.FriendshipCreateManyRequesterInput | Prisma.FriendshipCreateManyRequesterInput[]
  skipDuplicates?: boolean
}

export type FriendshipCreateWithoutAddresseeInput = {
  id?: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
  requester: Prisma.UserCreateNestedOneWithoutSendRequestInput
}

export type FriendshipUncheckedCreateWithoutAddresseeInput = {
  id?: string
  requesterId: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
}

export type FriendshipCreateOrConnectWithoutAddresseeInput = {
  where: Prisma.FriendshipWhereUniqueInput
  create: Prisma.XOR<Prisma.FriendshipCreateWithoutAddresseeInput, Prisma.FriendshipUncheckedCreateWithoutAddresseeInput>
}

export type FriendshipCreateManyAddresseeInputEnvelope = {
  data: Prisma.FriendshipCreateManyAddresseeInput | Prisma.FriendshipCreateManyAddresseeInput[]
  skipDuplicates?: boolean
}

export type FriendshipUpsertWithWhereUniqueWithoutRequesterInput = {
  where: Prisma.FriendshipWhereUniqueInput
  update: Prisma.XOR<Prisma.FriendshipUpdateWithoutRequesterInput, Prisma.FriendshipUncheckedUpdateWithoutRequesterInput>
  create: Prisma.XOR<Prisma.FriendshipCreateWithoutRequesterInput, Prisma.FriendshipUncheckedCreateWithoutRequesterInput>
}

export type FriendshipUpdateWithWhereUniqueWithoutRequesterInput = {
  where: Prisma.FriendshipWhereUniqueInput
  data: Prisma.XOR<Prisma.FriendshipUpdateWithoutRequesterInput, Prisma.FriendshipUncheckedUpdateWithoutRequesterInput>
}

export type FriendshipUpdateManyWithWhereWithoutRequesterInput = {
  where: Prisma.FriendshipScalarWhereInput
  data: Prisma.XOR<Prisma.FriendshipUpdateManyMutationInput, Prisma.FriendshipUncheckedUpdateManyWithoutRequesterInput>
}

export type FriendshipScalarWhereInput = {
  AND?: Prisma.FriendshipScalarWhereInput | Prisma.FriendshipScalarWhereInput[]
  OR?: Prisma.FriendshipScalarWhereInput[]
  NOT?: Prisma.FriendshipScalarWhereInput | Prisma.FriendshipScalarWhereInput[]
  id?: Prisma.StringFilter<"Friendship"> | string
  requesterId?: Prisma.StringFilter<"Friendship"> | string
  addresseeId?: Prisma.StringFilter<"Friendship"> | string
  status?: Prisma.EnumFriendshipStatusFilter<"Friendship"> | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFilter<"Friendship"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Friendship"> | Date | string
}

export type FriendshipUpsertWithWhereUniqueWithoutAddresseeInput = {
  where: Prisma.FriendshipWhereUniqueInput
  update: Prisma.XOR<Prisma.FriendshipUpdateWithoutAddresseeInput, Prisma.FriendshipUncheckedUpdateWithoutAddresseeInput>
  create: Prisma.XOR<Prisma.FriendshipCreateWithoutAddresseeInput, Prisma.FriendshipUncheckedCreateWithoutAddresseeInput>
}

export type FriendshipUpdateWithWhereUniqueWithoutAddresseeInput = {
  where: Prisma.FriendshipWhereUniqueInput
  data: Prisma.XOR<Prisma.FriendshipUpdateWithoutAddresseeInput, Prisma.FriendshipUncheckedUpdateWithoutAddresseeInput>
}

export type FriendshipUpdateManyWithWhereWithoutAddresseeInput = {
  where: Prisma.FriendshipScalarWhereInput
  data: Prisma.XOR<Prisma.FriendshipUpdateManyMutationInput, Prisma.FriendshipUncheckedUpdateManyWithoutAddresseeInput>
}

export type FriendshipCreateManyRequesterInput = {
  id?: string
  addresseeId: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
}

export type FriendshipCreateManyAddresseeInput = {
  id?: string
  requesterId: string
  status?: $Enums.FriendshipStatus
  createAt?: Date | string
  updatedAt?: Date | string
}

export type FriendshipUpdateWithoutRequesterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  addressee?: Prisma.UserUpdateOneRequiredWithoutReceivedRequestsNestedInput
}

export type FriendshipUncheckedUpdateWithoutRequesterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  addresseeId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FriendshipUncheckedUpdateManyWithoutRequesterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  addresseeId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FriendshipUpdateWithoutAddresseeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  requester?: Prisma.UserUpdateOneRequiredWithoutSendRequestNestedInput
}

export type FriendshipUncheckedUpdateWithoutAddresseeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FriendshipUncheckedUpdateManyWithoutAddresseeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFriendshipStatusFieldUpdateOperationsInput | $Enums.FriendshipStatus
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FriendshipSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  requesterId?: boolean
  addresseeId?: boolean
  status?: boolean
  createAt?: boolean
  updatedAt?: boolean
  requester?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  addressee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["friendship"]>

export type FriendshipSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  requesterId?: boolean
  addresseeId?: boolean
  status?: boolean
  createAt?: boolean
  updatedAt?: boolean
  requester?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  addressee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["friendship"]>

export type FriendshipSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  requesterId?: boolean
  addresseeId?: boolean
  status?: boolean
  createAt?: boolean
  updatedAt?: boolean
  requester?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  addressee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["friendship"]>

export type FriendshipSelectScalar = {
  id?: boolean
  requesterId?: boolean
  addresseeId?: boolean
  status?: boolean
  createAt?: boolean
  updatedAt?: boolean
}

export type FriendshipOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "requesterId" | "addresseeId" | "status" | "createAt" | "updatedAt", ExtArgs["result"]["friendship"]>
export type FriendshipInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  requester?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  addressee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FriendshipIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  requester?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  addressee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FriendshipIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  requester?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  addressee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $FriendshipPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Friendship"
  objects: {
    requester: Prisma.$UserPayload<ExtArgs>
    addressee: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    requesterId: string
    addresseeId: string
    status: $Enums.FriendshipStatus
    createAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["friendship"]>
  composites: {}
}

export type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FriendshipPayload, S>

export type FriendshipCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FriendshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FriendshipCountAggregateInputType | true
  }

export interface FriendshipDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friendship'], meta: { name: 'Friendship' } }
  /**
   * Find zero or one Friendship that matches the filter.
   * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
   * @example
   * // Get one Friendship
   * const friendship = await prisma.friendship.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FriendshipFindUniqueArgs>(args: Prisma.SelectSubset<T, FriendshipFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Friendship that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
   * @example
   * // Get one Friendship
   * const friendship = await prisma.friendship.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FriendshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Friendship that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
   * @example
   * // Get one Friendship
   * const friendship = await prisma.friendship.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FriendshipFindFirstArgs>(args?: Prisma.SelectSubset<T, FriendshipFindFirstArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Friendship that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
   * @example
   * // Get one Friendship
   * const friendship = await prisma.friendship.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FriendshipFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Friendships that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Friendships
   * const friendships = await prisma.friendship.findMany()
   * 
   * // Get first 10 Friendships
   * const friendships = await prisma.friendship.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FriendshipFindManyArgs>(args?: Prisma.SelectSubset<T, FriendshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Friendship.
   * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
   * @example
   * // Create one Friendship
   * const Friendship = await prisma.friendship.create({
   *   data: {
   *     // ... data to create a Friendship
   *   }
   * })
   * 
   */
  create<T extends FriendshipCreateArgs>(args: Prisma.SelectSubset<T, FriendshipCreateArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Friendships.
   * @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
   * @example
   * // Create many Friendships
   * const friendship = await prisma.friendship.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FriendshipCreateManyArgs>(args?: Prisma.SelectSubset<T, FriendshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Friendships and returns the data saved in the database.
   * @param {FriendshipCreateManyAndReturnArgs} args - Arguments to create many Friendships.
   * @example
   * // Create many Friendships
   * const friendship = await prisma.friendship.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Friendships and only return the `id`
   * const friendshipWithIdOnly = await prisma.friendship.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FriendshipCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FriendshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Friendship.
   * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
   * @example
   * // Delete one Friendship
   * const Friendship = await prisma.friendship.delete({
   *   where: {
   *     // ... filter to delete one Friendship
   *   }
   * })
   * 
   */
  delete<T extends FriendshipDeleteArgs>(args: Prisma.SelectSubset<T, FriendshipDeleteArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Friendship.
   * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
   * @example
   * // Update one Friendship
   * const friendship = await prisma.friendship.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FriendshipUpdateArgs>(args: Prisma.SelectSubset<T, FriendshipUpdateArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Friendships.
   * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
   * @example
   * // Delete a few Friendships
   * const { count } = await prisma.friendship.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FriendshipDeleteManyArgs>(args?: Prisma.SelectSubset<T, FriendshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Friendships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Friendships
   * const friendship = await prisma.friendship.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FriendshipUpdateManyArgs>(args: Prisma.SelectSubset<T, FriendshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Friendships and returns the data updated in the database.
   * @param {FriendshipUpdateManyAndReturnArgs} args - Arguments to update many Friendships.
   * @example
   * // Update many Friendships
   * const friendship = await prisma.friendship.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Friendships and only return the `id`
   * const friendshipWithIdOnly = await prisma.friendship.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FriendshipUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FriendshipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Friendship.
   * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
   * @example
   * // Update or create a Friendship
   * const friendship = await prisma.friendship.upsert({
   *   create: {
   *     // ... data to create a Friendship
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Friendship we want to update
   *   }
   * })
   */
  upsert<T extends FriendshipUpsertArgs>(args: Prisma.SelectSubset<T, FriendshipUpsertArgs<ExtArgs>>): Prisma.Prisma__FriendshipClient<runtime.Types.Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Friendships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
   * @example
   * // Count the number of Friendships
   * const count = await prisma.friendship.count({
   *   where: {
   *     // ... the filter for the Friendships we want to count
   *   }
   * })
  **/
  count<T extends FriendshipCountArgs>(
    args?: Prisma.Subset<T, FriendshipCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FriendshipCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Friendship.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FriendshipAggregateArgs>(args: Prisma.Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

  /**
   * Group by Friendship.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FriendshipGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FriendshipGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FriendshipGroupByArgs['orderBy'] }
      : { orderBy?: FriendshipGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Friendship model
 */
readonly fields: FriendshipFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Friendship.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FriendshipClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  requester<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  addressee<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Friendship model
 */
export interface FriendshipFieldRefs {
  readonly id: Prisma.FieldRef<"Friendship", 'String'>
  readonly requesterId: Prisma.FieldRef<"Friendship", 'String'>
  readonly addresseeId: Prisma.FieldRef<"Friendship", 'String'>
  readonly status: Prisma.FieldRef<"Friendship", 'FriendshipStatus'>
  readonly createAt: Prisma.FieldRef<"Friendship", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Friendship", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Friendship findUnique
 */
export type FriendshipFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * Filter, which Friendship to fetch.
   */
  where: Prisma.FriendshipWhereUniqueInput
}

/**
 * Friendship findUniqueOrThrow
 */
export type FriendshipFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * Filter, which Friendship to fetch.
   */
  where: Prisma.FriendshipWhereUniqueInput
}

/**
 * Friendship findFirst
 */
export type FriendshipFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * Filter, which Friendship to fetch.
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Friendships to fetch.
   */
  orderBy?: Prisma.FriendshipOrderByWithRelationInput | Prisma.FriendshipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Friendships.
   */
  cursor?: Prisma.FriendshipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Friendships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Friendships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Friendships.
   */
  distinct?: Prisma.FriendshipScalarFieldEnum | Prisma.FriendshipScalarFieldEnum[]
}

/**
 * Friendship findFirstOrThrow
 */
export type FriendshipFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * Filter, which Friendship to fetch.
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Friendships to fetch.
   */
  orderBy?: Prisma.FriendshipOrderByWithRelationInput | Prisma.FriendshipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Friendships.
   */
  cursor?: Prisma.FriendshipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Friendships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Friendships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Friendships.
   */
  distinct?: Prisma.FriendshipScalarFieldEnum | Prisma.FriendshipScalarFieldEnum[]
}

/**
 * Friendship findMany
 */
export type FriendshipFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * Filter, which Friendships to fetch.
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Friendships to fetch.
   */
  orderBy?: Prisma.FriendshipOrderByWithRelationInput | Prisma.FriendshipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Friendships.
   */
  cursor?: Prisma.FriendshipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Friendships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Friendships.
   */
  skip?: number
  distinct?: Prisma.FriendshipScalarFieldEnum | Prisma.FriendshipScalarFieldEnum[]
}

/**
 * Friendship create
 */
export type FriendshipCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * The data needed to create a Friendship.
   */
  data: Prisma.XOR<Prisma.FriendshipCreateInput, Prisma.FriendshipUncheckedCreateInput>
}

/**
 * Friendship createMany
 */
export type FriendshipCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Friendships.
   */
  data: Prisma.FriendshipCreateManyInput | Prisma.FriendshipCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Friendship createManyAndReturn
 */
export type FriendshipCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * The data used to create many Friendships.
   */
  data: Prisma.FriendshipCreateManyInput | Prisma.FriendshipCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Friendship update
 */
export type FriendshipUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * The data needed to update a Friendship.
   */
  data: Prisma.XOR<Prisma.FriendshipUpdateInput, Prisma.FriendshipUncheckedUpdateInput>
  /**
   * Choose, which Friendship to update.
   */
  where: Prisma.FriendshipWhereUniqueInput
}

/**
 * Friendship updateMany
 */
export type FriendshipUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Friendships.
   */
  data: Prisma.XOR<Prisma.FriendshipUpdateManyMutationInput, Prisma.FriendshipUncheckedUpdateManyInput>
  /**
   * Filter which Friendships to update
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * Limit how many Friendships to update.
   */
  limit?: number
}

/**
 * Friendship updateManyAndReturn
 */
export type FriendshipUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * The data used to update Friendships.
   */
  data: Prisma.XOR<Prisma.FriendshipUpdateManyMutationInput, Prisma.FriendshipUncheckedUpdateManyInput>
  /**
   * Filter which Friendships to update
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * Limit how many Friendships to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Friendship upsert
 */
export type FriendshipUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * The filter to search for the Friendship to update in case it exists.
   */
  where: Prisma.FriendshipWhereUniqueInput
  /**
   * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
   */
  create: Prisma.XOR<Prisma.FriendshipCreateInput, Prisma.FriendshipUncheckedCreateInput>
  /**
   * In case the Friendship was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FriendshipUpdateInput, Prisma.FriendshipUncheckedUpdateInput>
}

/**
 * Friendship delete
 */
export type FriendshipDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
  /**
   * Filter which Friendship to delete.
   */
  where: Prisma.FriendshipWhereUniqueInput
}

/**
 * Friendship deleteMany
 */
export type FriendshipDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Friendships to delete
   */
  where?: Prisma.FriendshipWhereInput
  /**
   * Limit how many Friendships to delete.
   */
  limit?: number
}

/**
 * Friendship without action
 */
export type FriendshipDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Friendship
   */
  select?: Prisma.FriendshipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Friendship
   */
  omit?: Prisma.FriendshipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FriendshipInclude<ExtArgs> | null
}
